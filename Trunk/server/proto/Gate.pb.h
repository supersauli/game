// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gate.proto

#ifndef PROTOBUF_INCLUDED_Gate_2eproto
#define PROTOBUF_INCLUDED_Gate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Gate_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Gate_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Gate_2eproto();
namespace GateServer {
class NewGate;
class NewGateDefaultTypeInternal;
extern NewGateDefaultTypeInternal _NewGate_default_instance_;
class UserLogin;
class UserLoginDefaultTypeInternal;
extern UserLoginDefaultTypeInternal _UserLogin_default_instance_;
}  // namespace GateServer
namespace google {
namespace protobuf {
template<> ::GateServer::NewGate* Arena::CreateMaybeMessage<::GateServer::NewGate>(Arena*);
template<> ::GateServer::UserLogin* Arena::CreateMaybeMessage<::GateServer::UserLogin>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace GateServer {

// ===================================================================

class NewGate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GateServer.NewGate) */ {
 public:
  NewGate();
  virtual ~NewGate();

  NewGate(const NewGate& from);

  inline NewGate& operator=(const NewGate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewGate(NewGate&& from) noexcept
    : NewGate() {
    *this = ::std::move(from);
  }

  inline NewGate& operator=(NewGate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NewGate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewGate* internal_default_instance() {
    return reinterpret_cast<const NewGate*>(
               &_NewGate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewGate* other);
  friend void swap(NewGate& a, NewGate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewGate* New() const final {
    return CreateMaybeMessage<NewGate>(NULL);
  }

  NewGate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewGate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewGate& from);
  void MergeFrom(const NewGate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewGate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strIP = 2;
  void clear_strip();
  static const int kStrIPFieldNumber = 2;
  const ::std::string& strip() const;
  void set_strip(const ::std::string& value);
  #if LANG_CXX11
  void set_strip(::std::string&& value);
  #endif
  void set_strip(const char* value);
  void set_strip(const char* value, size_t size);
  ::std::string* mutable_strip();
  ::std::string* release_strip();
  void set_allocated_strip(::std::string* strip);

  // uint32 dwID = 1;
  void clear_dwid();
  static const int kDwIDFieldNumber = 1;
  ::google::protobuf::uint32 dwid() const;
  void set_dwid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GateServer.NewGate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strip_;
  ::google::protobuf::uint32 dwid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// -------------------------------------------------------------------

class UserLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GateServer.UserLogin) */ {
 public:
  UserLogin();
  virtual ~UserLogin();

  UserLogin(const UserLogin& from);

  inline UserLogin& operator=(const UserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogin(UserLogin&& from) noexcept
    : UserLogin() {
    *this = ::std::move(from);
  }

  inline UserLogin& operator=(UserLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogin* internal_default_instance() {
    return reinterpret_cast<const UserLogin*>(
               &_UserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserLogin* other);
  friend void swap(UserLogin& a, UserLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogin* New() const final {
    return CreateMaybeMessage<UserLogin>(NULL);
  }

  UserLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLogin& from);
  void MergeFrom(const UserLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes str = 2;
  void clear_str();
  static const int kStrFieldNumber = 2;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const void* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // uint32 dwID = 1;
  void clear_dwid();
  static const int kDwIDFieldNumber = 1;
  ::google::protobuf::uint32 dwid() const;
  void set_dwid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GateServer.UserLogin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::uint32 dwid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewGate

// uint32 dwID = 1;
inline void NewGate::clear_dwid() {
  dwid_ = 0u;
}
inline ::google::protobuf::uint32 NewGate::dwid() const {
  // @@protoc_insertion_point(field_get:GateServer.NewGate.dwID)
  return dwid_;
}
inline void NewGate::set_dwid(::google::protobuf::uint32 value) {
  
  dwid_ = value;
  // @@protoc_insertion_point(field_set:GateServer.NewGate.dwID)
}

// string strIP = 2;
inline void NewGate::clear_strip() {
  strip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewGate::strip() const {
  // @@protoc_insertion_point(field_get:GateServer.NewGate.strIP)
  return strip_.GetNoArena();
}
inline void NewGate::set_strip(const ::std::string& value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GateServer.NewGate.strIP)
}
#if LANG_CXX11
inline void NewGate::set_strip(::std::string&& value) {
  
  strip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GateServer.NewGate.strIP)
}
#endif
inline void NewGate::set_strip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GateServer.NewGate.strIP)
}
inline void NewGate::set_strip(const char* value, size_t size) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GateServer.NewGate.strIP)
}
inline ::std::string* NewGate::mutable_strip() {
  
  // @@protoc_insertion_point(field_mutable:GateServer.NewGate.strIP)
  return strip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewGate::release_strip() {
  // @@protoc_insertion_point(field_release:GateServer.NewGate.strIP)
  
  return strip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewGate::set_allocated_strip(::std::string* strip) {
  if (strip != NULL) {
    
  } else {
    
  }
  strip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strip);
  // @@protoc_insertion_point(field_set_allocated:GateServer.NewGate.strIP)
}

// -------------------------------------------------------------------

// UserLogin

// uint32 dwID = 1;
inline void UserLogin::clear_dwid() {
  dwid_ = 0u;
}
inline ::google::protobuf::uint32 UserLogin::dwid() const {
  // @@protoc_insertion_point(field_get:GateServer.UserLogin.dwID)
  return dwid_;
}
inline void UserLogin::set_dwid(::google::protobuf::uint32 value) {
  
  dwid_ = value;
  // @@protoc_insertion_point(field_set:GateServer.UserLogin.dwID)
}

// bytes str = 2;
inline void UserLogin::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLogin::str() const {
  // @@protoc_insertion_point(field_get:GateServer.UserLogin.str)
  return str_.GetNoArena();
}
inline void UserLogin::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GateServer.UserLogin.str)
}
#if LANG_CXX11
inline void UserLogin::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GateServer.UserLogin.str)
}
#endif
inline void UserLogin::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GateServer.UserLogin.str)
}
inline void UserLogin::set_str(const void* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GateServer.UserLogin.str)
}
inline ::std::string* UserLogin::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:GateServer.UserLogin.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLogin::release_str() {
  // @@protoc_insertion_point(field_release:GateServer.UserLogin.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogin::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:GateServer.UserLogin.str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GateServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Gate_2eproto
